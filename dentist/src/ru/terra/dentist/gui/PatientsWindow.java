package ru.terra.dentist.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import ru.terra.dentist.gui.dialogs.NewPatientDialog;
import ru.terra.dentist.orm.PatientManager;
import ru.terra.dentist.orm.dto.PatientDTO;
import ru.terra.dentist.orm.entity.Patient;

/**
 *
 * @author terranz
 */
public class PatientsWindow extends javax.swing.JFrame implements Reloadable
{
    private static PatientManager pe = new PatientManager();

    /** Creates new form PatientsWindow */
    public PatientsWindow()
    {
	initComponents();
	loadPatients();
	this.setLocationRelativeTo(null);
    }

    private void loadPatients()
    {
	ExecutorService pool = Executors.newFixedThreadPool(1);
	Callable<DefaultTableModel> loader = new Callable<DefaultTableModel>()
	{
	    @Override
	    public DefaultTableModel call() throws Exception
	    {
		Vector<String> tableHeaders = new Vector<String>();
		Vector tableData = new Vector();
		tableHeaders.add("Идент");
		tableHeaders.add("Имя");
		tableHeaders.add("Отчество");
		tableHeaders.add("Фамилия");
		tableHeaders.add("Номер");

		for (Object o : pe.findAll(Patient.class))
		{
		    Vector<Object> oneRow = new Vector<Object>();
		    oneRow.add(((Patient) o).getPatId());
		    oneRow.add(((Patient) o).getPatName());
		    oneRow.add(((Patient) o).getPatMidname());
		    oneRow.add(((Patient) o).getPatSurname());
		    oneRow.add(((Patient) o).getPatNum());
		    tableData.add(oneRow);
		}
		return new DefaultTableModel(tableData, tableHeaders);
	    }
	};
	Future<DefaultTableModel> future = pool.submit(loader);
	try
	{
	    tblPatients.setModel(future.get());
	} catch (InterruptedException ex)
	{
	    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
	} catch (ExecutionException ex)
	{
	    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
	}
    }

    @Override
    public void reload()
    {
	loadPatients();
    }

    private class NewPatientOkActionListener implements ActionListener
    {
	private NewPatientDialog npd;
	private Reloadable r;

	public NewPatientOkActionListener(NewPatientDialog npd, Reloadable r)
	{
	    this.npd = npd;
	    this.r = r;
	}

	@Override
	public void actionPerformed(ActionEvent e)
	{
	    try
	    {
		pe.insert(npd.getResult());
	    } catch (Exception ex)
	    {
		System.out.println(ex.getMessage());
	    } finally
	    {
		npd.setVisible(false);
		npd.dispose();
		r.reload();
	    }
	}
    }

    private class UpdatePatientOkActionListener implements ActionListener
    {
	private NewPatientDialog npd;
	private Reloadable r;
	private Patient patient;

	public UpdatePatientOkActionListener(NewPatientDialog npd, Reloadable r, Patient p)
	{
	    this.npd = npd;
	    this.r = r;
	    this.patient = p;
	}

	@Override
	public void actionPerformed(ActionEvent e)
	{
	    try
	    {
		patient.setPatMidname(npd.getResult().getPatMidname());
		patient.setPatName(npd.getResult().getPatName());
		patient.setPatNum(npd.getResult().getPatNum());
		patient.setPatSurname(npd.getResult().getPatSurname());
		pe.update(patient);
	    } catch (Exception ex)
	    {
		System.out.println(ex.getMessage());
	    } finally
	    {
		npd.setVisible(false);
		npd.dispose();
		r.reload();
	    }
	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        mrPatients = new javax.swing.JMenu();
        miAdd = new javax.swing.JMenuItem();
        miEdit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miDelete = new javax.swing.JMenuItem();
        mrReports = new javax.swing.JMenu();
        miPrintAll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Пациенты");

        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPatients);

        mrPatients.setText("Пациенты");

        miAdd.setText("Добавить");
        miAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddActionPerformed(evt);
            }
        });
        mrPatients.add(miAdd);

        miEdit.setText("Редактировать");
        miEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditActionPerformed(evt);
            }
        });
        mrPatients.add(miEdit);
        mrPatients.add(jSeparator1);

        miDelete.setText("Удалить");
        miDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteActionPerformed(evt);
            }
        });
        mrPatients.add(miDelete);

        jMenuBar1.add(mrPatients);

        mrReports.setText("Отчёты");

        miPrintAll.setText("Распечатать список");
        mrReports.add(miPrintAll);

        jMenuBar1.add(mrReports);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAddActionPerformed
    {//GEN-HEADEREND:event_miAddActionPerformed
	NewPatientDialog npd = new NewPatientDialog(this, true);
	npd.getOkButton().addActionListener(new NewPatientOkActionListener(npd, this));
	npd.setVisible(true);
    }//GEN-LAST:event_miAddActionPerformed

    private void miEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miEditActionPerformed
    {//GEN-HEADEREND:event_miEditActionPerformed
	Integer row = tblPatients.getSelectedRow();
	if (row != -1)
	{
	    NewPatientDialog npd = new NewPatientDialog(this, true);
	    npd.getOkButton().addActionListener(new UpdatePatientOkActionListener(npd, this, (Patient) pe.findById((Integer) tblPatients.getModel().getValueAt(row, 0))));
	    PatientDTO p = new PatientDTO();
	    p.setId((Integer) tblPatients.getModel().getValueAt(row, 0));
	    p.setName((String) tblPatients.getModel().getValueAt(row, 1));
	    p.setMidname((String) tblPatients.getModel().getValueAt(row, 2));
	    p.setSurname((String) tblPatients.getModel().getValueAt(row, 3));
	    p.setNum((Integer) tblPatients.getModel().getValueAt(row, 4));
	    npd.setPatient(p);
	    npd.setVisible(true);
	}
    }//GEN-LAST:event_miEditActionPerformed

    private void miDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miDeleteActionPerformed
    {//GEN-HEADEREND:event_miDeleteActionPerformed
	Integer row = tblPatients.getSelectedRow();
	if (row != -1)
	{
	    Patient p = (Patient) pe.findById((Integer) tblPatients.getModel().getValueAt(row, 0));
	    if (p != null)
	    {
		pe.delete(p);
	    }
	    loadPatients();
	}
    }//GEN-LAST:event_miDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
	java.awt.EventQueue.invokeLater(new Runnable()
	{
	    @Override
	    public void run()
	    {
		new PatientsWindow().setVisible(true);
	    }
	});
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem miAdd;
    private javax.swing.JMenuItem miDelete;
    private javax.swing.JMenuItem miEdit;
    private javax.swing.JMenuItem miPrintAll;
    private javax.swing.JMenu mrPatients;
    private javax.swing.JMenu mrReports;
    private javax.swing.JTable tblPatients;
    // End of variables declaration//GEN-END:variables
}
